name: conifer
stats:
  - report: false
recipe: wordpress
config:
  webroot: wp
  php: '7.4'

services:
  node:
    type: node:10

  appserver:
    run_as_root:
      # TODO don't think we need this anymore?
      # Temporary hack to get a Debian package to install
      # https://github.com/lando/lando/issues/1554
      - echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf
      - echo "deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main" > /etc/apt/sources.list.d/jessie-backports.list
      - sed -i '/deb http:\/\/deb.debian.org\/debian jessie-updates main/d' /etc/apt/sources.list

      - apt-get update
      - apt-get install zip

    run:
      - composer install
      - ./scripts/setup-wordpress.sh

    overrides:
      environment:
        # Pass any non-empty CI envvar from the host into Lando
        # This is so we can force non-interactive mode setting up WP
        CI: ${CI:-''}

  database:
    type: mysql:5.7

  gitbook:
    type: node:10

    run:
      - yarn
      - ./scripts/build-docs.sh

  cypress:
    type: node:10

    run:
      - yarn cypress install

    overrides:
      image: 'sitecrafting/lando-cypress-wordpress:latest'

  mailhog:
    type: mailhog:v1.0.0
    hogfrom:
      - appserver

  docs:
    type: nginx:1.18
    ssl: true
    webroot: docs/_book

tooling:
  install:
    service: appserver
    cmd: './scripts/setup-wordpress.sh'
    description: 'Install and configure WordPress for custom plugin dev'

  install-test-themes:
    service: appserver
    cmd: 'rsync --verbose --archive --recursive ./test/themes/ ./wp/wp-content/themes/'
    description: 'Sync test themes for e2e testing'

  debug:
    service: appserver
    cmd: 'tail -f ./wp/wp-content/debug.log'
    description: 'Get real-time WP debug log output'

  cypress:
    service: cypress
    cmd: 'yarn cypress'
    description: 'Run arbitrary cypress commands'

  e2e:
    service: cypress
    cmd: 'yarn cypress run'
    description: 'Run end-to-end tests'

  unit:
    service: appserver
    cmd: './vendor/bin/phpunit' # TODO --group unit
    description: 'Run unit tests'

  # TODO integration tests
  integration:
    service: appserver
    cmd: './vendor/bin/phpunit --group integration'
    description: 'Run integration tests'

  test:
    service: appserver
    cmd: './vendor/bin/phpunit'
    description: 'Run all unit and integration tests'

  sniff-summary:
    service: appserver
    cmd: './vendor/bin/phpcs --report=summary --standard=./phpcs.xml test lib'
    description: 'Summarize PHPCS code sniffer findings'

  sniff:
    service: appserver
    cmd: './vendor/bin/phpcs --standard=./phpcs.xml test lib'
    description: 'Run PHPCS code sniffer on all test and production code'

  sniff-fix:
    service: appserver
    cmd: './vendor/bin/phpcbf --standard=./phpcs.xml test lib'
    description: 'Fix all automatically fixable issues found by PHPCS'

  analyze:
    service: appserver
    cmd: './vendor/bin/phpstan analyse'
    description: 'Run phpstan coding standards (level 1)'

  analyse:
    service: appserver
    cmd: './vendor/bin/phpstan analyse'
    description: 'Run phpstan coding standards (level 1)'

  phpstan:
    service: appserver
    cmd: './vendor/bin/phpstan'
    description: 'Run phpstan commands for static analysis'

  docs:
    service: gitbook
    cmd: './scripts/build-docs.sh ./docs'
    description: 'Build documentation in _book folder using Gitbook'

  gitbook:
    service: gitbook
    cmd: 'yarn gitbook'
    description: 'Run arbitrary gitbook commands'

events:
  pre-docs:
    - appserver: './scripts/build-api-md.sh'

  pre-e2e:
    - appserver: 'echo installing test themes...'
    - appserver: 'rsync --verbose --archive --recursive ./test/themes/ ./wp/wp-content/themes/'

proxy:
  appserver:
    - conifer.lndo.site

  mailhog:
    - mail.conifer.lndo.site

  docs:
    - docs.conifer.lndo.site
